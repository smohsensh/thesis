<!1,2013100520:43:18>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\‎فصل{مروری بر کارهای انجام شده}\برچسب‎{chap:prev}‎</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">همانطور که قبلا اشاره شد یکی از راه‌کارهای اتخاذ شده برای برخورد با نقاط نادقیق، پیدا کردن انتخابی از بین تمام انتخاب‌های ممکن برای نقاط است که یک ویژگی خاص (مثل محیط، فاصله، قطر و ‎$\ldots$)‎ از یک ساختار هندسی (مثل پوشش محدب، کوچکترین درخت پوشا و ‎$\ldots$)‎  برای نقاط انتخاب شده، کوچکترین و بزرگترین در بین همه انتخاب‌های ممکن باشد. در ادامه کارهای صورت گرفته در این زمینه را معرفی می‌کنیم. </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\‎قسمت{کارهای پیشین در مدل مجموعه نقاط رنگی گسسته}</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">یک مجموعه شامل ‎$n$‎ نقطه و ‎$ k\leq n$‎ رنگ داده شده و هر نقطه با یک رنگ همراه است. به یک ناحیه انتخاب رنگی</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\LTRfootnote{Color selection}‎</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> گفته می‌شود اگر شامل حداقل یک نقطه از هر رنگ باشد. برای ناحیه‌های مختلف همراه با یک تابع هدف به دنبال کوچکترین و بزرگترین انتخاب‌های رنگی ممکن از آن نوع (ناحیه به همراه تابع هدف) هستیم.</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">در واقع اصلی‌ترین خصیصه در این‌گونه مسائل این است که عناصر ورودی آنها چندین نسخه (یا کپی) دارند اما خروجی این مسائل محدود به این است که برای هر یک از اعضا دقیقا یکی از کپی‌ها استفاده شود. که در اینجا هر یک از اعضاء به همراه کپی‌هایش (مکان‌های ممکن برای یک نقطه نادقیق) را با یک رنگ نشان می‌دهیم. برای این‌گونه از مسائل کاربردهای زیادی می‌توان متصور شد. برای مثال مسائل مکان‌یابی تسهیلات</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\LTRfootnote{Facility location}‎</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">را در نظر بگیرید. فرض کنید ‎$k$‎ نوع مختلف از امکانات موجود است مثلا مدرسه، پست‌خانه و سوپرمارکت و ‎$\ldots$‎ که با ‎$n$‎ نقطه رنگی بطوریکه هر نوع از امکانات با یک رنگ مجزا در صفحه مدل شده‌اند. یک هدف اولیه انتخاب مکانی است که در نزدیکی آن از هر کدام از امکانات حداقل یکی موجود باشد. </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎%Newwwwwwwwwwww‎</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\‎زیرقسمت{قطر، نزدیک‌ترین زوج، کوچکترین دایره پوششی، عرض}</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">فن و همکاران‎~\cite{fan2011some}‎ یک الگوریتم تصادفی کارا با زمان ‎$O(n^{1+\epsilon})$‎ برای بزرگترین قطر رنگی ارائه کردند که در آن ‎$\epsilon$‎ به اندازه داخواه می‌تواند کوچک باشد. ژانگ و همکاران‎~\cite{zhang2009keyword}‎ یک الگوریتم با زمان اجرای ‎$ O(n^m) $‎ برای کوچکترین قطر رنگی نشان دادند که در آن ‎$m$‎ نشان‌دهنده تعداد رنگ‌ها است. فلایشر و ژو‎~\cite{fleischer2010computing,‎ ‎fleischer2011computing}‎ نشان دادند این مسئله برای متریک‌های ‎$L_1$‎ و ‎$L_\infty$‎ در زمان چندجمله‌ای قابل حل است درحالیکه برای متریک‌های ‎$L_p \ (p=2‎, ‎3‎, .‎..)$‎ ان‌پی-سخت است. بعلاوه یک الگوریتم تقریبی کارا با ضریب تقریب ثابت برای این مسئله ارائه کردند. </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">%ما در این رساله با استفاده از مفهوم مجموعه هسته یک الگوریتم تقریبی با ضریب تقریت ‎$ (1+\epsilon) $‎ در زمان چندجمله‌ای برای مسئله کوچکترین قطر رنگی ارائه می‌کنیم. </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">یک سوال طبیعی در این مدل کوچکترین دایره رنگی است (منظور از آن، پیدا کردن یک انتخاب رنگی است بطوریکه کوچکترین دایره پوششی این انتخاب رنگی در بین تمام انتخاب‌های رنگی ممکن کوچکترین باشد)، می‌توان آنرا توسط پوشش فوقانی</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\LTRfootnote{Upper envelop}‎</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">از پوسته‌های نمودار ورونوی</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\LTRfootnote{Voronoi diagram}‎</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> پیدا کرد که توسط هوتنلوچر و همکاران‎~\cite{huttenlocher1993upper}‎ و شریر و آگاروال‎~\cite{sharir1995davenport}‎ ارائه شده است. الگوریتم آنها برای محاسبه جواب، ‎$O(kn \log n)$‎ زمان صرف می‌کند. آبلانس و همکاران‎~\cite{abellanas2001farthest}‎ نشان دادند که نمودار دورترین ورونوی رنگی با شرط ‎$k \leq \frac{n}{2}$‎ از مرتبه ‎$O(nk)$‎ است. سپس الگوریتمی‌هایی برای ساخت نمودار دورترین ورونوی رنگی، کوچکترین دایره پوشای رنگی، کوچکترین مستطیل پوشای رنگی و کوچکترین عرض رنگی دربرگیرنده نقاط در تمام جهت‌ها ارائه کردند. داس و همکاران‎~\cite{das2005recognition}‎ یک الگوریتم برای کوچکترین کوریدر</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\LTRfootnote{Corridor}‎</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> پوشای رنگی در زمان ‎$O(n^2 \log n)$‎ و یک الگوریتم برای برای کوچکترین مستطیل پوشای رنگی با جهت دلخواه در زمان ‎$O(n^3 \log n)$‎ ارائه کردند. </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">خانتیموری و همکاران‎~\cite{Khanteimouri2013Intervals}‎ نوع دیگری از این مسائل، برای زمانی که هدف پوشاندن نقاط رنگی با دو شیء مشابه است، را مورد بررسی قرار دادند. آنها مسئله پوشاندن نقاط رنگی در یک بعد توسط دو بازه را مورد بررسی قرار دادند (به بیان دیگر دو بازه‌ای را پیدا می‌کنند به‌طوری‌که از هر رنگ حداقل یک نقطه در حداقل یکی از این بازه‌ها موجود باشد). برای حالتی که بازه بزرگتر، کوچکترین اندازه را داشته باشد الگوریتمی در زمان ‎$O(n^2 \log n)$‎ با فضای مصرفی ‎$O(n)$‎ معرفی کردند. </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> فن و همکاران‎~\cite{fan2011some}‎ مسئله پیدا کردن حد بالا برای نزدیک‌ترین زوج در یک بعد را مورد مطالعه قرار دادند و نشان دادند این مسئله حتی در یک بعد هم ان‌پی‌-سخت است و هیچ الگوریتم تقریبی با ضریب تقریب بهتر از ‎$\frac{1}{2}$‎ در زمان چندجمله‌ای وجود ندارد. بعلاوه کانسگرا و همکاران‎~\cite{consuegrageometric}‎ نشان دادند این مسئله نه تنها در یک بعد بلکه حتی زمانی که از هر رنگ حداکثر ‎$3$‎ نقطه داریم بازهم ان‌پی‌-سخت است و زمانی که برای از هر رنگ کمتر مساوی دو نقطه داریم و نقاط در فضای ‎$d$-‎بعدی هستند الگوریتمی با زمان ‎$O(n^2 \log n)$‎ ارائه کردند. همچنین مسئله پیدا کردن حد پایین برای بیشترین فاصله را مورد بررسی قرار دادند و یک الگوریتم تقریبی با ضریب تقریب ‎$2$‎ با زمان ‎$O(n^3‎ .‎k^3 \log nk)$‎ زمانی‌که نقاط در یک بعد قرار دارند ارائه کردند. </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> </p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\‎زیرقسمت{ساختارهای هندسی}</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">لی و همکاران‎~\cite{myung1995generalized}‎ مسئله درخت پوشای کمینه تعمیم یافته</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">‎\LTRfootnote{Generalized Minimum Spanning Tree}‎</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> را مورد بررسی قرار دادند. در این مسئله یک گراف که راس‌های آن به مجموعه‌هایی دوبه‌دو مجزا تقسیم شده‌اند داده شده و مسئله پیدا کردن یک درخت با کمترین هزینه است بطوریکه شامل دقیقا یک راس از هر مجموعه باشد. لی و همکاران نشان دادند این مسئله ان‌پی‌-سخت است.</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> یک مسئله دیگر در این حوزه، فروشنده دوره‌گرد با همسایگی‎\LTRfootnote{TSP with neighborhoods}‎ است که در آن ‎$n$‎ ناحیه ‎(همسایگی)‎ بعنوان ورودی داده شده و به دنبال کوتاه‌ترین دور هستیم که تمام ناحیه‌ها را بازدید کند. از آنجایی که این مسئله تعمیم مسئله فروشنده دوره‌گرد است بدیهی است که ان‌پی‌-سخت است. دومیترسکو و میچل‎~\cite{dumitrescu2001approximation}‎ یک الگوریتم با ضریب تقریب ثابت برای مسئله در حالت کلی و یک الگوریتم با ضریب تقریب ‎$(1+\epsilon)$‎ برای مسئله زمانیکه ناحیه‌ها دیسک‌های واحد مجزا هستند ارائه کردند. میچل‎~\cite{mitchell2007ptas}‎ برای حالتی‌که ناحیه‌ها هر شکل فت</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> ‎\LTRfootnote{Fat}‎</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">  مجزایی در صفحه هستند یک الگوریتم با ضریب تقریب ‎$(1+\epsilon)$‎ در زمان چندجمله‌ای ارائه کرد. </p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> الباسینو و همکاران‎~\cite{elbassioni2005approximation}‎ مسئله فروشنده دوره‌گرد گروهی اقلیدسی</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> ‎\LTRfootnote{Euclidean Group TSP}‎</p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">  را بررسی کردند، یک مجموعه ‎$P$‎ شامل ‎$n$‎ نقطه در در صفحه و یک مجموعه از ‎$m$‎ ناحیه‌ی بسته داده شده است بطوریکه هرکدام حداقل شامل یک نقطه از ‎$P$‎ است و می‌خواهیم کوتاه‌ترین دوری را پیدا کنیم که حداقل یک نقطه از هر ناحیه را ملاقات کند. آنها در حالتی که ناحیه‌ها مجزا و ‎$\alpha$-‎فت هستند یک الگوریتم با ضریب تقریب ‎$(9.1\alpha+1)$‎ ارائه کردند. بعلاوه یک الگوریتم با ضریب تقریب ثابت برای مسئله در حالتی‌که ناحیه‌ها مجزا نیستند ارائه کردند. </p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> فن و همکاران‎~\cite{fan2011some}‎ مسئله درخت پوشای کمینه را در مدل مجموعه نقاط رنگی گسسته در نظر گرفتند و ثابت کردند محاسبه هر دو کران پایین و بالا برای این مسئله ان‌پی-سخت است. بعلاوه در ‎~\cite{consuegrageometric,‎ ‎fraser2012algorithms}‎ نشان داده شده مسئله درخت پوشای کمینه حتی زمانی که از هر رنگ حداکثر دو نقطه وجود دارد ان‌پی-سخت است.</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> </p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">  فن و همکاران‎~\cite{fan2011some}‎ کوچکترین پوشش محدب رنگی را در نظر گرفتند و نشان دادند این مسئله ان‌پی‌-کامل است. بعلاوه دو الگوریتم تقریبی با ضریب تقریب ‎$\pi$‎ در زمان ‎$O(n^2‎ + ‎nk\log k)$‎ و دیگری با ضریب تقریب ‎$\sqrt{2}$‎ در زمان ‎$O(min\{n(n-k)^2)‎, ‎nk(n-k)\})$‎ ارائه کردند.   </p>
<p dir='rtl' style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"> بعلاوه کانسگرا و همکاران‎~\cite{consuegrageometric}‎ با تعمیم مفهوم ‎$\epsilon$-‎کرنل به آواتار ‎$\epsilon$-‎کرنل (مفهوم آواتار معادل نقاط رنگی است) در فضای ‎$d$-‎بعدی توانستند الگوریتم‌هایی با ضریب تقریب ‎$(1+\epsilon)$‎ در زمان چندجمله‌ای برای کوچکترین پوشش محدب رنگی، کوچکترین ابرباکس رنگی موازی محورهای مختصات با کم‌ترین حجم و محیط و کوچکترین قطر رنگی ارائه کنند. الگوریتمی که ما در بخش بعدی برای مسئله کوچکترین قطر ارائه می‌کنیم دارای زمانی کمتر با ضریب تقریب مشابه برای این مسئله است. </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;"></p></body></html>