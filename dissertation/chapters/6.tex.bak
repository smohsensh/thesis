
%------chapter 1: literature review
\chapter{مرور ادبیات}
\section{ مسئله زمان‌بندی کارکنان}
\LTRfootnote{Personnel Scheduling}
\subsection{تعریف مسئله}
مسئله زمان‌بندی کارکنان را می‌توان با این سه مولفه تعریف کرد:
\begin{itemize}
\item \textit{شیفت: }
یک تعداد بازه زمانی در طول روز که جمع آنان یک روز کاری را تشکیل می‌دهد 
\item \textit{برنامه‌ریزی}: 
که برای هر یک از کارکنان شیفت‌هایی که حضور دارد را مشخص می‌کند.
\item \textit{محدودیت‌ها: } 
یک مجموعه قوانین که نشان می‌دهد هر یک از کارکنان در چه شیفت‌هایی امکان حضور دارند
و هم‌چنین محدودیت‌های پیچیده‌تر مانند زمان‌های حضور کارکنان نسبت به هم و یا محدودیت‌های محیط کار نیز ممکن است در مسئله وجود داشته باشد
\end{itemize}

محدودیت‌های موجود در مسئله نیز معمولا به دو نوع محدودیت تقسیم می‌شوند
\cite{burke1997automated}
:
\begin{itemize}
\item
 محدودیت‌های سخت که بایست حتما برآورده شوند. مثلا یک فرد نمی‌تواند در یک شیفت  واحد در دو واحد سازمانی مختلف حضور داشته باشد. جواب‌هایی که محدودیت‌های سخت را برآورده کنند جواب امکان‌پذیر خوانده می‌شوند.
 \item
  محدودیت‌های نرم که حتی‌المقدور بایست برآورده بشوند. مثلا تعداد زنگ‌های یک درس برای یک کلاس نبایست بیشتر از دو باشد. اما در مثال‌های محدودیت‌های نرم عموما همگی قابل برآورده کردن نیستند. در نتیجه از بعضی از آن‌ها تخطی خواهد شد. اگر برای نقض کردن هر محدودیت نرم جریمه‌ای در نظر بگیریم جوابی امکان‌پذیر با حداقل جریمه جواب بهینه خوانده می‌شود. 
\end{itemize}
مسئله‌ی برنامه‌ریزی کارکنان در مشاغل خدماتی دارای کاربرد وسیعی است؛ حضور پرستاران در بیمارستان‌ها، کادرهای پرواز، منشی‌های مراکز پاسخ‌گویی تلفنی و برنامه مراکز آموزشی از جمله مثال‌های آن هستند. 
\cite{ch2springer}

\section{دسته بندی}
ارنست و همکاران
\cite{ernst2004or}
این مسئله را به شش دسته زیر تقسیم می‌کند.
این شش دسته معمولا شش مرحله متوالی در نظر گرفته می‌شوند که برای رسیدن به یک برنامه مناسب بایست پشت سر هم اجرا بشوند.
\begin{itemize}
\item 
پیش‌بینی تقاضا:‌ که نیاز پیش‌بینی تقاضا در سیستم در هر شیفت است
\item
 برنامه‌ریزی روز‌های تعطیل: توزیع بهینه‌ی روزهای تعطیلی میان روزهای کاری
\item 
زمان‌بندی شیفت‌ها: که از مجموعه انتخاب‌های بسیار شیفت‌های مناسب کاری را بر می‌گزیند تا یک برنامه خاص را پوشش دهند.
\item
تولید خط کاری: دو مورد بالا را تلفیق کرده و الگوهای کاری ممکن را می‌سازد 
\item 
اختصاص کار: وظایفی که در سیستم بایست انجام شود را به شیفت‌های الگوی کاری تخصیص می‌دهد.
\item 
تخصیص کارکنان: با توجه وظایف هر شیفت، کارکنانی که باید در آن شیفت وجود داشته باشند را تعیین می‌کند. 
\end{itemize}
 مسئله مورد علاقه ما 
یعنی تعیین برنامه درسی مدرسه روزهای کاری و شیفت‌ها (زنگ‌های کلاسی) عموما از قبل تعیین شده‌اند و هدف تخصیص وظایف و کارکنان (دسته پنج و شش) است. 
بررسی‌های که روی دسته پنج و شش از دسته‌بندی بالا انجام شده عموما برای مثال 
برنامه‌ریزی موسسات آموزشی و در برخی موارد برنامه‌ریزی حضور پرستاران در بیمارستان‌هاست.
(در مورد برنامه‌ریزی پرستاران کارهای زیادی وجود دارد اما عموما به دسته سوم یعنی زمان‌بندی شیفت‌ها پرداخته‌اند و نه دسته‌های پنج و شش) 

\section{روش‌های حل }
تقسیم‌بندی بر اساس روش‌های استفاده شده در حل نیز امکان‌پذیر است؛ مقاله مروری
\cite{bechtold1991comparative}
این روش‌ها را به ده دسته زیر تقسیم‌بندی می‌کند. 
\begin{enumerate}
\item حل دستی مسئله 
\item برنامه‌نویسی عدد صحیح 
\item مدل‌سازی ضمنی\LTRfootnote{Implicit Modeling }
\item تجزیه\LTRfootnote{decomposition}
\item برنامه‌نویسی هدف‌محور\LTRfootnote{Goal Programming}
\item تولید مجموعه کاری \LTRfootnote{Working set generation}
\item روش‌های مبنتی بر برنامه‌ریزی خطی \LTRfootnote{LP-based programming }
\item ساخت و بهبود \LTRfootnote{Construction and Improvement}
\item فرامکاشفه‌ای\LTRfootnote{meta-heuristic}
\item روش‌های دیگر
\end{enumerate}

%روش‌های فرا مکاشفه‌ای و برنامه نویسی عددصحیح از محبوبیت بالاتری برخودار بوده اند. 

روش‌های فرامکاشفه‌ای استفاده شده برای رسیدن به یک جواب امکان‌پذیر و تقریبا بهینه عموما که شامل: رنگ‌آمیزی گراف، الگوریتم ژنتیک، شبیه‌سازی گرم و سرد شدن 
\LTRfootnote{Simulated Annealing}
و استنتاج مبتنی بر محدودیت
\LTRfootnote{Constraint-Based Reasoning}
 (CBR) 
هستند. اکثر این روش‌ها جواب‌های امکان‌پذیر ولی نه بهینه تولید می‌کنند.
\cite{ho2009incorporating}

نویسندگان 
\cite{rossi2003comparison}
 یک مقایسه میان ۵ روش فرامکاشفه‌ای تکاملی شامل 
الگوریتم‌های تکاملی 
\LTRfootnote{Evolutionary }
 روش‌های کلونی مورچگان، 
\LTRfootnote{Ant Colony }
جستجوی محلی تکرار شونده،  
\LTRfootnote{Iterated Local Search}
شبیه‌سازی گرم و سرد شدن و جستجوی ممنوعه 
\LTRfootnote{Tabu Search }
است. برای منصفانه بودن نتایج مدل‌سازی مسئله به صورت یکسانی انجام شده است تا ورودی‌ها مشابه باشند. در پایان نتیجه‌گیری آن‌ها این است که برتری محسوسی میان روش‌های ارائه شده با مثال‌های داده شده قابل تشخیص نیست. حتی بعد از اینکه کلاس‌هایی از مسائل با خواص مشابه پدید می‌آورند باز هم نتیجه‌گیری خاصی ممکن نیست. 
یعنی تشخیص بهترین جواب حتی برای یک دسته خاص از مسائل با ویژگی‌های یکسان نیز آسان نیست. 

\cite{burke2003knowledge}
یک روش مافوق مکاشفه‌ای 
\LTRfootnote{hyper-heuristic}
کشف دانش را بوسیله تصمیم‌گیری بر اساس موارد مشابه قبلی پیشنهاد می‌دهد. مافوق مکاشفه‌ای بودن به این معناست که  مستقیما به حل خود مسئله نمی‌پردازد. بلکه با استفاده از 
 نوع ساختار مسئله 
و شباهت‌های آن با موارد موجود در پایگاه دانش یک روش مکاشفه‌ای را که برای حل این مسئله مناسب‌تر است پیشنهاد می‌دهد. 

همچنین روش‌های ترکیبی زیادی نیز پیشنهاد شده است. نویسندگان [۸] ترکیب روش‌های ارضای استنتاج مبتنی بر محدودیت را با الگوریتم ژنتیک و نویسندگان [۹] ترکیب آن را با روش توده ذرات پیشنهاد داده‌اند. 

همچنین در [۷] از یک روش مبتنی بر عامل 
\LTRfootnote{Agent-Based}
برای حل مسئله زمان‌بندی دانشگاهی استفاده شده است. در [۶] نیز یک روش چندعامله پیشنهاد شده تا با ارتباط میان عامل‌ها جواب بهتری بدست بیاید؛ اما از نتایج عملی آن گزارشی نمی‌دهد.


\section{برنامه ریزی دروس}
\subsection{معرفی مسئله}
مسئله برنامه‌ریزی درسی عبارت است از  تخصیص تعدادی آموزگار به تعدادی ساعت درسی که از قبل 
در یک دوره زمانی (معمولا هفته) تعیین شده است، همراه با برآورده کردن محدودیت‌های مختلفی که درمسئله وجود دارد. صورت‌های مختلفی از این مسئله تا به حال بیان شده است، مثلا یک صورت آن مربوط به دانشگاه است که دانشجویان خود دروس را انتخاب می‌کنند و ممکن است برنامه‌های مخلتفی داشته باشند. و صورت دیگر مربوط به مدرسه که دانش‌آموزان امکان انتخاب ندارند. 

انجام دستی این کار معمولا بسیار زمان‌گیر است و خیلی اوقات جواب بدست آمده راضی‌کننده نیست. 
در نتیجه در طول سی سال اخیر، با شروع از 
\cite{gotlieb1962construction}
 مقالات زیادی در این باب منتشر شده است. \cite{schaerf1999survey}
همچنین چند برنامه برای این کار در دانشگاه‌های مختلف در دنیا تولید شده و اکنون مورد استفاده قرار می‌گیرد. 

در \cite{schaerf1999survey} مسائل برنامه‌ریزی درسی به سه دسته (نه الزاما جدا از هم) تقسیم شده است:
\begin{itemize}
\item \textbf{برنامه‌ریزی مدرسه}
\item \textbf{برنامه‌ریزی واحد‌های دانشگاهی}
\item  \textbf{برنامه‌ریزی برگزاری امتحانات}
\end{itemize}

مفاهیم تعریف شده در قسمت قبل شامل محدودیت‌های سخت و نرم و جواب امکان‌پذیر و بهینه اینجا نیز به همان معنی وجود دارد. و البته همیشه مستقل از نوع جواب مورد نظر یک مسئله 
مقدم بر آن وجود دارد که آیا اصلا جوابی که محدودیت‌های سخت را برآورده کند وجود دارد یا نه؟ 


در ادامه، طبق تعریف \cite{schaerf1999survey} ابتدا یک نسخه ساده شده که راه حل چندجمله‌ای برای آن وجود دارد را بررسی می‌کنیم 
سپس یک نسخه‌پیچیده‌تر را که هرچند هنوز مطابق مسئله واقعی نیست اما به اندازه کافی سخت است 
(NP-hard) 
را معرفی می‌کنیم. 

\subsection{نسخه ساده }
فرض کنید 
$ m $
کلاس 
$ c_1, \ldots, c_m $
و $n $
معلم 
$ t_1, \ldots, t_n $
و
$1, \ldots, p$
زنگ درسی داشته باشیم. 

همچنین ماتریس
$R_{m \times n} $
که ماتریس نیازمندی‌ها می‌نامیمش موجود است که درایه 
$r_{ij} $
آن نشان دهنده این است که معلم $t_j$ باید 
$r_{ij} $
زنگ به کلاس $c_i$ تدرس کند. 

تنها دو محدودیت بدیهی وجود دارد که یک معلم در یک زنگ خاص به بیش از یک کلاس تخصیص نیابد 
و بیش از یک معلم نیز در یک زنگ خاص به یک کلاس واحد تخصیص نیافته باشند. 

بعبارت دیگر به دنبال یک ماتریس سه بعدی
 $X_{m \times n \times p}$ 
 هستیم که یک بودن درایه‌ی $x_ijk$ آن نشان می‌دهد که معلم $t_j$ در زنگ $k$م در هفته سر کلاس $c_i$ حاضر می‌شود. 

این ماتریس بایستی در شرایط زیر صدق کند:
 
\begin{equation}
\sum_{k=1}^p x_{ijk} = r_{jk}   (i= 1,\ldots m; j=1,\ldots n)
\label{trueNum}
\end{equation}

\begin{equation}
\sum_{i=1}^m x_{ijk} \leq 1   (k= 1,\ldots p; j=1,\ldots n)
\label{atmostOneTeacher}
\end{equation}

\begin{equation}
\sum_{j=1}^n x_{ijk} \leq 1   (i= 1,\ldots m; k=1,\ldots p)
\label{atmostOneClass}
\end{equation}

محدودیت \ref{trueNum} این که هر معلم به تعداد زنگ مورد نیاز سر کلاس حاضر شود را تضمین می‌کند. محدودیت \ref{atmostOneTeacher} این که بیش از یک معلم در یک زنگ به کلاسی تخصیص داده نمی‌شود 
و محدودیت \ref{atmostOneClass} این که در هر زنگ حداکثر یک کلاس برای هر معلم تعیین می‌شود را. 

نویسندگان  
\cite{even1975complexity}
نشان می‌دهند که اگر جمع زنگ‌های حضور یک معلم و جمع زنگ‌هایی که یک کلاس
باید تشکیل شود هیچ کدام از تعداد زنگ‌های هفته ($p$) بیشتر نشوند، یعنی بطور دقیق‌تر
\[
\sum_{i=1}^m r_{ij} \leq p
\]

\[
\sum_{j=1}^n r_{ij} \leq p
\]
قطعا یک جواب برای آن وجود دارد. 

روش پیشنهادی آنها ساخت یک گراف چندگانه دو بخشی است که معلمین و کلاس‌ها رئوس آن هستند و 
راس کلاس $c_i$ به راس معلم $t_j$ با
$r_{ij} $ 
یال متصل شده است. 
نویسندگان
\cite{hopcroft1973n}
اثبات می‌کنند که راه حل فوق نسبت به سایز گراف چند جمله‌ای است. 

همچنین در 
\cite{de1985introduction}
 یک راه حل دیگر مبتنی بر رنگ‌آمیزی یال‌های گراف برای مسئله فوق ارائه شده است.

\subsection{نسخه دارای محدودیت}
نسخه معرفی شده در بخش قبل هیچ محدودیت اضافه‌ای روی مسئله تعریف نمی‌کند. اما در مثال‌های واقعی این محدودیت‌ها وجود دارند. برای مثال یکی محدودیت ساده این است که یک معلم ممکن است در بعضی از زنگ‌های هفته امکان حضور در مدرسه را نداشته باشد. 

جانجیجر 
\LTRfootnote{Junginger}
\cite{junginger1986timetabling}
مسئله جدید را که محدودیت در دسترس نبودن یک معلم یا کلاس به آن اضافه شده، اینگونه بیان می‌کند که دو ماتریس جدید 
$T_{m \times p} $
و 
$C_{n \times p}$
را معرفی می‌کند که 
$t_{jk} =1 $
اگر معلم 
$t_j$
در زنگ $k$ در دسترس است. و در غیر این صورت 
$t_{jk} =0 $
و به صورت مشابه برای درایه 
$c_{ik} $
و کلاس $c_i$ .

جانجینجر محدودیت‌های 
\ref{atmostOneClass} 
و 
\ref{atmostOneTeacher}
را با محدودیت‌های 
\ref{ifClassAvail}
 و
 \ref{ifTeacherAvail}
  جایگزین می‌کند. 

\begin{equation}
\sum_{i=1}^m x_{ijk} \leq c_{ik}    (k= 1,\ldots p; j=1,\ldots n)
\label{ifClassAvail}
\end{equation}

\begin{equation}
\sum_{j=1}^n x_{ijk} \leq t_{jk}  (i= 1,\ldots m; k=1,\ldots p)
\label{ifTeacherAvail}
\end{equation}

همچنین نسخه‌هایی با محدودیت‌های بیشتر نیز تعریف شده است. \cite{de1985introduction}


مسئله بالا توسط اون 
\LTRfootnote{Even}
 و همکاران
\cite{even1975complexity}
 با کاهش از مسئله‌ی $3SAT$ یک مسئله‌ی NP-Hard نشان داده  شده است. 
 
 
 \subsection{نسخه‌های دیگر }
مسائل واقعی معمولا محدودیت‌های بیشتری نسبت به محدودیت‌های بیان شده در بخش قبلی دارند. 
در این بخش به برخی از محدودیت‌ها و حالات دیگر اشاره می‌کنیم.

\subsubsection*{زنگ‌های مشترک}
 گاهی اوقات در مدارس زنگ‌های مشترک وجود دارد. برای مثال در برخی مدارس کلاس ورزش 
برای دو کلاس به صورت هم‌زمان برگزار می‌شود. 

در 
\cite{yoshikawa1996constraint}
 و 
\cite{schaerf1996tabu}
به مسئله زنگ‌های مشترک پرداخته شده است. 

\subsubsection*{نگاشت غیر یک به یک میان معلم‌ها و دروس}
تا به حال در بیان مسئله فرض شده بود که مشخص است که هر کلاس با هر معلم چند زنگ باید داشته باشد. در
\cite{cooper1993solution}
 مسئله به این صورت در نظر گرفته شده است که اطلاعات قبلی مشخص می‌کند که هر کلاس چند زنگ از یک درس را بایستی داشته باشد و نه چند معلم. در کنار این نگاشتی بین معلمین و دروس وجود دارد. که در حالت کلی ممکن است هر درس را چندین معلم را تدریس کنند و هم‌چنین یک معلم بیش از یک درس را تدریس کند.
و البته یک درس برای یک کلاس خاص باید توسط یک معلم واحد تدریس شود. 
\subsubsection*{کلاس‌های بی معلم}
در بسیاری و شاید اکثر اوقات لازم است که هیچ کلاسی در هیچ زنگی بدون معلم نمانده باشد 
به عبارتی در ماتریس $R$ جمع درایه‌های هر ستون دقیقا برابر $p $ باشد. 

در\cite{schaerf1999survey} نوع کلی‌تر این محدودیت در نظر گرفته شده که فرض می‌کند برای هر کلاس
یک مجوعه از زنگ‌ها وجود دارد که در آن‌ها نبایست بدون معلم بماند. 


\subsubsection*{محدودیت‌های فضای فیزیکی}
به خاطر این فرض که معمولا در مدارس هر کلاس داری یک فضای فیزیکی مخصوص به خود است، در مسئله پایه این محدودیت که برخی کلاس‌ها نمی‌توانند در برخی زمان‌ها برگزار بشوند در نظر نگرفته شده بود. 

اما در مثال‌های واقعی گاهی اوقات بخاطر امکانات خاصی که برخی از دروس مثل آزمایشگاه یا کامپیوتر احتیاج دارند، امکان برگزاری هم‌زمان برخی کلاس‌ها وجود ندارد. یا اینکه ممکن است 
در برخی از زمان‌ها آن امکانات در دسترس نباشد و اصلا امکان برگزاری آن درس وجود نداشته باشد. 

\section{راه‌کارهای حل مسائل ارضای محدودیت}
از آنجا که مدل‌سازی مورد استفاده در این پروژه از مسئله زمان‌بندی برنامه‌درسی یک مدل‌سازی بیان محدودیت‌هاست، لازم است که مروری بر روش‌های مورد استفاده برای حل مسائل ارضای محدودیت داشته باشیم.

تعداد بسیار زیادی از مسائل حوزه هوش مصنوعی را در واقع می‌توان حالاتی از مسئله‌ی ارضای محدودیت در نظر گرفت.
\cite{nadel1990some}
 بعنوان مثال می‌توان به مسائل بینایی ماشین
\cite{montanari1974networks}, \cite{rosenfeld1976scene}, \cite{davis1981cooperating}
، زمان‌بندی،
\cite{dhar1990integer}, \cite{fox1989constrained}, \cite{prosser1989reactive}
 استدلال
\cite{dechter1991temporal}, \cite{geffner1987improved}, \cite{tsang1987consistent}, \cite{allen1983maintaining}
، مسائل گراف
\cite{mcgregor1979relational}, \cite{caramia2002constraint}
طراحی مدار
\cite{de1980propagation}
 اشاره کرد. روش‌های مختلفی نیز برای حل این مسائل معرفی شده است. بعضی از روش‌ها سعی در ساده کردن مسئله اصلی با انتشار محدودیت را دارند و بعضی از روش‌ها با استفاده از عقب‌گرد مستقیما به دنبال پاسخ می‌گردند. بعضی از روش‌ها نیز ترکیبی از روش‌های فوق هستند.
\cite{kumar1992algorithms} 

در مسائل ارضای محدودیت عموما یک مجموعه متغیر داریم که هر متغیر یک دامنه از مقادیر را می‌تواند اختیار کند. یک مجموعه محدودیت نیز وجود دارد که به تعدادی از متغیرها مربوط می‌شود و ترکیب مقادیری که آن‌ها می‌توانند اختیار کنند را محدود می‌سازد.
هدف یافتن یک یا همه مقداردهی‌ها از متغیرهاست که محدودیت‌ها را برآورده می‌سازد.
 فورمول‌بندی عمومی مسائل ارضای محدودیت در ؟؟؟ و  ؟؟؟‌ موجود است. 

در این نوشتار، بررسی  به آن دسته از مسائل ارضای محدودیت اختصاص دارد که دامنه مقادیر ممکن برای متغیر یک دامنه متناهی است و هم‌چنین هر محدودیت حداکثر به دو متغیر مربوط می‌شود. البته شرط اخیر در واقع اختصاص ویژه‌ای ایجاد نمی‌کند. چرا که هر مسئله ارضای محدودیت با محدودیت‌های که n متغیر را درگیر می‌کنند به یک مسئله ارضای محدودیت معادل قابل تبدیل است که محدودیت‌های آن حداکثر دو متغیر را درگیر می‌سازند. ؟؟؟

در واقع هر مسئله ارضای محدودیت با یک گراف متناظر است که متغیرها یال‌های آن هستند و محدودیت‌ها به وسیله‌ی یال‌ها نشان داده می‌شوند. محدودیتی که تنها به یک متغیر مربوط است با یالی که مبدا و مقصدش یکسان و راس متناظر با آن متغیر است نشان داده می‌شود \cite{kumar1992algorithms}

\subsection{عقب‌گرد}
یک روش حل مسائل ارضای محدودیت استفاده از پارادایم تولید و تست است. یعنی یک مقداردهی بصورت نظام‌مند تولید می‌شود و بعد صحت آن بررسی می‌شود.
تعداد مقداردهی‌هایی که این روش بررسی می‌کند برابر خواهد بود با اندازه ضرب دکارتی مجموعه مقادیر متغیرها. \cite{kumar1992algorithms}

یک روش کاراتر این است که متغیرها به صورت متوالی مقداردهی می‌شوند.  و هرگاه تمامی متغیرهای مربوط به یک محدودیت تولید شدند، برآورده شدن آن محدودیت مورد بررسی قرار می‌گیرد و در صورتی که برآورده نشده باشد، مقداردهی سایر متغیرها ادامه پیدا نمی‌کند. بلکه به آخرین متغیر مقداردهی شده که هنوز مقادیر جایگزین در دامنه خویش دارد عقب‌گرد می‌شود. به این صورت با عقب‌گرد یک زیرفضا از فضای مقداردهی‌ها حذف می‌شود. \cite{kumar1992algorithms}
این عقب‌گرد الزاما یک جستجوی عمق اول روی فضا انجام می‌دهد
\cite{kumar1987depth}

علی‌رغم این که عقب‌گرد اکیدا از روش تولید و تست برتر است اما هنوز برای مسائل
قابل اعتنا تعداد نمایی از جواب‌ها را بررسی می‌کند. \cite{kumar1992algorithms}

یک دلیل این مسئله مشکل کوبیدگی 
\LTRfootnote{thrashing }
است. یعنی جاهای مختلفی از جستجو به دلیل یکسانی شکست می‌خورد. 
\cite{gaschig1979performance}
یک دلیل ساده مسئله کوبیدگی وجود مقادیری در دامنه متغیرهاست که آن مقدار با یک 
محدودیت در تناقض است. (مستقل از مقادیر سایر متغیرها)
\cite{mackworth1977consistency}

یک دلیل دیگر این است که مثلا در دنباله‌ی متغیرهای
$V_1 , V_2 , \ldots , V_i , \ldots , V_j $
متغیر 
$ V_i $ 
در دامنه خود مقداری مانند $a $ دارد که برای متغیر
$ V_j $ 
هیچ مقداری باقی نمی‌گذارد. 
در این صورت هربار که $V_i = a $ مقدادهی می‌شود در هنگام مقداردهی 
$ V_j $ 
با شکست روبرو خواهیم شد. 
یعنی مقداردهی متغیرهای 
$ V_k (i < k <j  $ 
بیهوده تکرار می‌شود. \cite{kumar1992algorithms}

مشکل اول براحتی با حذف کردن مقادیری که مستقیما روی آن‌ها محدودیت یگانه وجود دارد 
از دامنه متغیرها اجتناب‌پذیر است. مشکل دوم که عدم وجود سازگاری یالی 
\LTRfootnote{arc consistency  }
نامیده می‌شود در زیربخش‌های آتی بررسی خواهد شد.

\subsection{انتشار محدودیت‌ها}
یال 
$(V_i , V_j) $
یک یال سازگار نامیده می‌شود اگر که هر مقدار در دامنه 
$ V_i $ 
دارای حداقل یک مقدار متناظر در دامنه‌ی 
$ V_j $ 
باشد که همه محدودیت‌های شامل $ V_i $ 
و$ V_j $ 
را برآورده سازد.  مفهوم سازگار یالی یک مفهوم جهت‌دار و نامتقارن است. یعنی وجود سازگاری یالی برای  
$(V_i , V_j) $
الزاما وجود سازگاری یالی برای 
$(V_j , V_i) $
را منتج نخواهد شد. 

برای ایجاد سازگاری یالی $(V_i , V_j) $ باید مقادیری از دامنه‌ی 
$ V_i $ 
که با شرط بالا را نقض می‌کنند، از دامنه‌ی آن حذف کنیم. روند زیر از\cite{mackworth1977consistency}این کار را انجام می‌دهد. 

\begin{verbatim}
procedure REVISE(Vi, Vj):
	delete := false
	for each x in Dom(Vi):
		if there is not such y in Dom(Vj)
		such that (x, y) is consistent 
		then
			delete x from Dom(Vi)
		endif
	endfor
return delete
end REVISE
\end{verbatim}

برای اینکه کل یال‌های گراف به سازگاری یالی برسند، اجرا کردن رویه‌ی فوق برای همه آنان کافی نیست. چرا که ممکن است بعد از حذف بعضی مقادیر از دامنه یک متغیر مثل 
$ V_j $ 
باید تمامی سازگاری‌های 
$(V_i , V_j) $
دوباره بررسی شود. چرا که بعضی از آن‌ها ممکن است با کوچکتر شدن دامنه‌ی 
$ V_j $ 
از بین رفته باشند. 

برای حل این مشکل الگوریتم AC-3 توسط \cite{mackworth1977consistency} ارائه شده است که رویه‌ی 
REVISE 
را برای متغیرهایی که لازم است دوباره بررسی شوند. ( و تنها برای آن‌ها) تکرار می‌کند:


\begin{verbatim}
procedure AC-3:
	
end AC-3
\end{verbatim}

اگر گراف متاظر با مسئله کاملا سازگاری یالی داشته باشد، باز هم نیاز به عقب‌گرد به طور کامل از بین نمی‌رود. در حالت کلی حتی در مورد جواب نمی‌توان اظهار نکرد. یعنی ممکن است گراف دارای جواب نباشد، جواب یکتا داشته باشد یا چندین جواب داشته باشد. \cite{kumar1992algorithms}

اما می‌توان مفهوم سازگاری یالی به مفهوم k-سازگاری توسعه داد. مفهوم k-سازگاری را برای یک گراف متناظر با مسئله‌ی ارضای محدودیت می‌توان اینگونه تعریف کرد: گراف دارای خاصیت k-سازگاری است اگر هر $k-1 $ متغیر را انتخاب کنیم و یک مقدار دهی برای آنان را در نظر بگیریم که تمام محدودیت‌های موجود میان ‌آن‌ها را برآورده می‌کند، آن‌گاه هر متغیر دیگری را در نظر بگیریم یک مقدار دهی برای آن وجود دارد که تمام محدودیت‌ها را میان این $k$ متغیر برآورده می‌سازد.  
\cite{meseguer1989constraint}

یک گراف را قویا  k-سازگار می‌نامند اگر برای تمامی $i$های $i\leq k$، 
 i-سازگار
باشد. 
\cite{renz2005weak}

با توجه به تعریف فوق عدم وجود مقادیری در دامنه متغیرها که صریحا با یک محدودیت روی 
تنها همان متغیر منع شده است برابر با ۱-سازگاری و سازگاری یالی برابر با ۲-سازگاری است. \cite{kumar1992algorithms}


